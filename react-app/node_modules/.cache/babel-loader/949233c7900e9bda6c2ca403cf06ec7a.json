{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Desktop\\\\CelestDoll\\\\Projet Nodejs\\\\Blog\\\\react-app\\\\src\\\\components\\\\paginate\\\\Paginate.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport Posts from '../posts/Posts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function PaginatedItems(_ref) {\n  _s();\n\n  let {\n    posts,\n    cats,\n    itemsPerPage\n  } = _ref;\n  // We start with an empty list of items.\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0); // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n\n  const [itemOffset, setItemOffset] = useState(0);\n  useEffect(() => {\n    // Fetch items from another resources.\n    const endOffset = itemOffset + itemsPerPage;\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n    setCurrentItems(posts.slice(itemOffset, endOffset));\n    console.log(`Slice is` + posts.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(posts.length / itemsPerPage));\n  }, [itemOffset, itemsPerPage, posts]); // Invoke when user click to request another page.\n\n  const handlePageClick = event => {\n    const newOffset = event.selected * itemsPerPage % posts.length;\n    console.log(`User requested page number ${event.selected}, which is offset ${newOffset}`);\n    setItemOffset(newOffset);\n  };\n\n  console.log(currentItems);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Posts, {\n      posts: posts,\n      cats: cats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      breakLabel: \"...\",\n      nextLabel: \"next >\",\n      onPageChange: handlePageClick,\n      pageRangeDisplayed: 5,\n      pageCount: pageCount,\n      previousLabel: \"< previous\",\n      renderOnZeroPageCount: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(PaginatedItems, \"HTeX8cSP+G2jiDQZoJcFFLxPhRM=\");\n\n_c = PaginatedItems;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaginatedItems\");","map":{"version":3,"sources":["C:/Users/Utilisateur/Desktop/CelestDoll/Projet Nodejs/Blog/react-app/src/components/paginate/Paginate.jsx"],"names":["React","useEffect","useState","ReactPaginate","Posts","PaginatedItems","posts","cats","itemsPerPage","currentItems","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","endOffset","console","log","slice","Math","ceil","length","handlePageClick","event","newOffset","selected"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;;AAEA,OAAO,SAASC,cAAT,OAAqD;AAAA;;AAAA,MAA7B;AAACC,IAAAA,KAAD;AAAOC,IAAAA,IAAP;AAAaC,IAAAA;AAAb,GAA6B;AACxD;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,CAAD,CAA1C,CAHwD,CAIxD;AACA;;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,CAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEd;AACA,UAAMc,SAAS,GAAGF,UAAU,GAAGL,YAA/B;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBJ,UAAW,OAAME,SAAU,EAA7D;AACAL,IAAAA,eAAe,CAACJ,KAAK,CAACY,KAAN,CAAYL,UAAZ,EAAwBE,SAAxB,CAAD,CAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAa,UAAD,GAAaX,KAAK,CAACY,KAAN,CAAYL,UAAZ,EAAwBE,SAAxB,CAAzB;AACAH,IAAAA,YAAY,CAACO,IAAI,CAACC,IAAL,CAAUd,KAAK,CAACe,MAAN,GAAeb,YAAzB,CAAD,CAAZ;AACD,GARQ,EAQN,CAACK,UAAD,EAAaL,YAAb,EAA0BF,KAA1B,CARM,CAAT,CARwD,CAkBxD;;AACA,QAAMgB,eAAe,GAAIC,KAAD,IAAW;AACjC,UAAMC,SAAS,GAAID,KAAK,CAACE,QAAN,GAAiBjB,YAAlB,GAAkCF,KAAK,CAACe,MAA1D;AACAL,IAAAA,OAAO,CAACC,GAAR,CACG,8BAA6BM,KAAK,CAACE,QAAS,qBAAoBD,SAAU,EAD7E;AAGAV,IAAAA,aAAa,CAACU,SAAD,CAAb;AACD,GAND;;AAQAR,EAAAA,OAAO,CAACC,GAAR,CAAYR,YAAZ;AACA,sBACE;AAAA,4BACE,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEH,KAAd;AAAqB,MAAA,IAAI,EAAEC;AAA3B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,aAAD;AACE,MAAA,UAAU,EAAC,KADb;AAEE,MAAA,SAAS,EAAC,QAFZ;AAGE,MAAA,YAAY,EAAEe,eAHhB;AAIE,MAAA,kBAAkB,EAAE,CAJtB;AAKE,MAAA,SAAS,EAAEX,SALb;AAME,MAAA,aAAa,EAAC,YANhB;AAOE,MAAA,qBAAqB,EAAE;AAPzB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAcD;;GA1CaN,c;;KAAAA,c","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport ReactPaginate from 'react-paginate';\r\nimport Posts from '../posts/Posts';\r\n\r\nexport function PaginatedItems({posts,cats, itemsPerPage }) {\r\n    // We start with an empty list of items.\r\n    const [currentItems, setCurrentItems] = useState(null);\r\n    const [pageCount, setPageCount] = useState(0);\r\n    // Here we use item offsets; we could also use page offsets\r\n    // following the API or data you're working with.\r\n    const [itemOffset, setItemOffset] = useState(0);\r\n\r\n    useEffect(() => {\r\n        \r\n      // Fetch items from another resources.\r\n      const endOffset = itemOffset + itemsPerPage;\r\n      console.log(`Loading items from ${itemOffset} to ${endOffset}`);\r\n      setCurrentItems(posts.slice(itemOffset, endOffset));\r\n      console.log(`Slice is` + posts.slice(itemOffset, endOffset))\r\n      setPageCount(Math.ceil(posts.length / itemsPerPage));\r\n    }, [itemOffset, itemsPerPage,posts]);\r\n  \r\n    // Invoke when user click to request another page.\r\n    const handlePageClick = (event) => {\r\n      const newOffset = (event.selected * itemsPerPage) % posts.length;\r\n      console.log(\r\n        `User requested page number ${event.selected}, which is offset ${newOffset}`\r\n      );\r\n      setItemOffset(newOffset);\r\n    };\r\n    \r\n    console.log(currentItems)\r\n    return (\r\n      <>\r\n        <Posts posts={posts} cats={cats} />\r\n        <ReactPaginate\r\n          breakLabel=\"...\"\r\n          nextLabel=\"next >\"\r\n          onPageChange={handlePageClick}\r\n          pageRangeDisplayed={5}\r\n          pageCount={pageCount}\r\n          previousLabel=\"< previous\"\r\n          renderOnZeroPageCount={null}\r\n        />\r\n      </>\r\n    );\r\n  }"]},"metadata":{},"sourceType":"module"}